class:: Open303
summary:: Open303 TB303 emulation for SuperCollider
categories:: Unknown

description::

SuperCollider plugin wrapper around Open303 TB303 emulator DSP code by Robin Schmidt
https://github.com/RobinSchmidt/Open303

classmethods::

method:: ar
argument:: noteevent
Trigger a note on or off event. Must be a single k-rate pulse with a value of 1.0. See example code below showing how to implement this.
argument:: notenum
MIDI note number of note-on/off event 0-127.
argument:: notevel
MIDI velocity of note-on/off event 0-127. Set to 0 for note-off.
argument:: notealloff
Trigger an all-notes-off event. Must be a single k-rate pulse with a value of 1.0.
argument:: waveform
Crossfade between triangle and square waveforms. 0.0-1.0 range.
argument:: cutoff
Filter cutoff frequency. 0.0-1.0 range.
argument:: resonance
Filter resonance. 0.0-1.0 range.
argument:: envmod
Filter envelope modulation amount. 0-1 range.
argument:: decay
Filter envelope decay time. 0-1 range.
argument:: accent
Accent level. 0-1 range.
argument:: volume
Output volume. 0-1 range. 

examples::

code::

// Suggested SynthDef with default parameter values, MIDI note trigger and cutoff control by MIDI CC
// Change CC numbers as necessary

(
MIDIClient.init;
MIDIIn.connectAll;

// Init bassline synth object
var bassline;
var m_on, m_off, m_cutoff;

SynthDef.new("AcidBass", {
	arg out,
	notenum = 60.0,
	notevel = 64.0,
	notealloff = 0.0,
	waveform = 0.85,
	cutoff = 0.229,
	resonance = 0.5,
	envmod = 0.25,
	decay = 0.5,
	accent = 0.5,
	volume = 0.9;
	// Declare vars
	var noteevent = NamedControl.tr(\noteevent); // Ensures 'noteevent' is only ever positive for 1 k-rate cycle!
	// Create output
	var result;
    result = Open303.ar(noteevent, notenum, notevel, notealloff, waveform, cutoff, resonance, envmod, decay, accent, volume);
	// Output output
	Out.ar(out, result);
}).add;

// Instantiate Open303 synth
bassline = Synth("AcidBass");

// MIDI functions
m_on = MIDIFunc.noteOn({ |vel, num, chan, src|
	bassline.set(\notenum, num);
	bassline.set(\notevel, vel);
	bassline.set(\noteevent, 1.0);
});
m_off = MIDIFunc.noteOff({ |vel, num, chan, src|
	bassline.set(\notenum, num);
	bassline.set(\notevel, 0.0);
	bassline.set(\noteevent, 1.0);
});
m_cutoff = MIDIFunc.cc({ |val, ccNum, chan, src|
	bassline.set("cutoff", val / 127);
}, ccNum:22);

)

::
