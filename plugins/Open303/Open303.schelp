class:: Open303
summary:: Open303 TB303 emulation for SuperCollider
categories:: Unknown

description::

SuperCollider plugin wrapper around Open303 TB303 emulator DSP code by Robin Schmidt
https://github.com/RobinSchmidt/Open303

Primarily intended for use as a Norns script audio Engine.

classmethods::

method:: ar
argument:: gate
Trigger a note on event. Gates and note-numbers must be managed in SCLang in a "mono-legato" setup as Open303 builtin note-handling will not work reliably. See example script below
argument:: notenum
MIDI note number of note-on/off event. 0-127
argument:: notevel
MIDI velocity of note-on/off event 0-127
argument:: notealloff
Trigger an all-notes-off event. Must be a single k-rate pulse with a value of 1.0
argument:: pitchbend
Pitchbend. 12.0-12.0 range
argument:: waveform
Crossfade between triangle and square waveforms. 0.0-1.0 range
argument:: cutoff
Filter cutoff frequency. 0.0-1.0 range
argument:: resonance
Filter resonance. 0.0-1.0 range
argument:: envmod
Filter envelope modulation amount. 0-1 range
argument:: decay
Filter envelope decay time. 0-1 range
argument:: accent
Accent level. 0-1 range
argument:: volume
Output volume. 0-1 range
argument:: filtermorph
Morph filter reponse from low-pass (emulated TB303) to band-pass to high-pass response. 0-1 range
argument:: extmix
External input mix. Fades between internal oscillator and external input. 0-1 range
argument:: extin
External audio input. Mixed with internal oscillator and fed through the filter and VCA. Mono audio signal

examples::

code::

// Suggested SynthDef with default parameter values, mono-legato note-handling and parameter control by MIDI CC
// Change CC numbers as necessary

( // SynthDef

s.waitForBoot {
	SynthDef.new("AcidBass", {
		arg out,
		gate        = 0.0,   // Trigger note
		notenum     = 60.0,  // MIDI note number of current note
		notevel     = 64.0,  // MIDI note velocity of current note
		waveform    = 0.85,  // Waveform saw > square
		cutoff      = 0.229, // Filter cutoff frequency
		resonance   = 0.5,   // Filter resonance
		envmod      = 0.25,  // Filter envelope-mod amount
		decay       = 0.5,   // Filter envelope decay
		accent      = 0.5,   // Accent amount
		volume      = 0.9,   // Synth output volume
		filtermorph = 0.0,   // Filter-morph 303 -> Bandpass -> Highpass
		pan         = 0.0;   // Output pan L-R (0 = centre)

		// Declare vars
		var notealloff = NamedControl.tr(\notealloff);
		// Create output
		var sig;

		// Synth. Requires Open303_SuperCollider extension from:
		// https://github.com/toneburst/Open303_SuperCollider/tree/main
		sig = Open303.ar(
			gate:			gate,
			notenum:		notenum,
			notevel:		notevel,
			notealloff:		notealloff,
			waveform:		waveform,
			cutoff:			cutoff,
			resonance:		resonance,
			envmod:			envmod,
			decay:			decay,
			accent:			accent,
			volume:			volume,
			filtermorph:	filtermorph
		);

		// Output output
		Out.ar(out, Pan2.ar(sig, pan, 1.0));
	}).add;
};

)

( // Start it

// We need to setup a "mono-legato" note-handling system so that the synth can correctly add slides to overlapping notes.
// Create note-stack list. This will contain MIDI note numbers of all currently-held keys
~notestack = List[];

// Create bassline synth instance
~bassline = Synth(\AcidBass);

// Start MIDI
MIDIClient.init;
MIDIIn.connectAll;

// MIDI functions
MIDIFunc.noteOn({ |vel, num|
	// Add new note to note-stack
	~notestack.add(num);
	// If note-stack size is now 1, this is a non-legato note
	if (~notestack.size == 1) {
		// Switch gate high and update synth MIDI note index and velocity. Synth will play note
		//postf("SCLANG NOTEON % STACK SIZE % STACK % \n", num, ~notestack.size, ~notestack);
		~bassline.set(\gate, 1.0, \notenum, num, \notevel, vel);
	} {
		// ...else this is a legato note
		// Hold gate high and update synth note number and velocity. Synth will slide to new note
		//postf("SCLANG SLIDETO % STACK SIZE % STACK % \n", num, ~notestack.size, ~notestack);
		~bassline.set(\gate, 1.0, \notenum, num, \notevel, vel);
	}
});

MIDIFunc.noteOff({ |vel, num|
	// Seach for note index in note-stack and remove
	~notestack.do({ arg item, i; if (item == num) { ~notestack.removeAt(i); }});
	// Check if this we've just released the last held note
	if (~notestack.size == 0) {
		// ...we have. Pull gate low and send note index to synth (velocity not required). Synth will release note
		//postf("SCLANG LAST NOTE OFF % STACK SIZE % STACK % \n", num, ~notestack.size, ~notestack);
		~bassline.set(\gate, 0.0, \notenum, num);
	} {
		// Notes still held. Update synth with most recent note index remaining in note-stack. Synth will slide back to note
		//postf("SCLANG SLIDETO % STACK SIZE % STACK % \n", ~notestack.last, ~notestack.size, ~notestack);
		~bassline.set(\gate, 1.0, \notenum, ~notestack.last);
	}
});

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\waveform, val / 127);
}, ccNum:21);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\cutoff, val / 127);
}, ccNum:22);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\resonance, val / 127);
}, ccNum:23);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\envmod, val / 127);
}, ccNum:24);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\decay, val / 127);
}, ccNum:25);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\accent, val / 127);
}, ccNum:26);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\filtermorph, val / 127);
}, ccNum:27);

MIDIFunc.cc({ |val, ccNum, chan, src|
	~bassline.set(\volume, val / 127);
}, ccNum:28);

)

// Stop it
~bassline.free;
MIDIdef.freeAll;

::
